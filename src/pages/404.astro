---
import PageNotFoundLayout from "@layouts/PageNotFoundLayout.astro";

const title: string = "404";
const subTitle: string = "Oops! You’ve found a hidden page!";
const btnTitle: string = "Let’s head back";
---

<PageNotFoundLayout>
  <div id="square-container" class="square__container"></div>
  <section>
    <div class="wrapper">
      <div class="container">
        <h1>{title}</h1>
        <p>{subTitle}</p>
        <button class="btn" id="go-back">
          {btnTitle}
        </button>
      </div>
    </div>
  </section>

  <script>
    document.getElementById("go-back")?.addEventListener("click", () => {
      history.back();
    });
  </script>

  <style>
    section {
      position: relative;
    }

    .wrapper {
      position: absolute;
      display: flex;
      height: 100vh;
      width: 100vw;
      align-items: center;
      justify-content: center;
    }
    .container {
      margin-inline: auto;
      max-width: 640px;
      text-align: center;
      clip-path: polygon(0 100%, 100% 100%, 100% 0, 0 0);

      h1 {
        font-family: var(--montserrat-black);
        font-size: calc(200 * var(--unit-fx));
        color: var(--primary-color);
        clip-path: polygon(0 100%, 100% 100%, 100% 0, 0 0);

        span {
          clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
        }
      }

      p {
        font-family: var(--montserrat);
        font-size: calc(30 * var(--unit-fx));
      }

      .btn {
        font-family: var(--montserrat);
        font-size: calc(13 * var(--unit-fx));
        padding: calc(10 * var(--unit-fx)) calc(20 * var(--unit-fx));
        margin-block: calc(30 * var(--unit-fx));
        border-radius: calc(10 * var(--unit-fx));
        font-size: calc(13 * var(--unit-fx));
        font-family: var(--montserrat);
        cursor: pointer;
        color: var(--text-lighter);
        border: calc(1 * var(--unit-fx)) solid var(--dock-border);
        transition: all 500ms cubic-bezier(0.215, 0.61, 0.355, 1);
        transform: translateY(150px);
      }

      .btn:hover {
        background-color: var(--primary-color);
        color: var(--background-color);
        border: calc(1 * var(--unit-fx)) solid var(--primary-color);
      }
    }

    .square__container {
      width: 100vw;
      height: 100vh;
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-start;
      align-content: flex-start;
      box-sizing: border-box;
      overflow: hidden;
      z-index: 10;
      pointer-events: none;

      .square {
        width: calc(75 * var(--unit-fx));
        height: calc(75 * var(--unit-fx));
        background-color: var(--primary-color);
        box-sizing: border-box;
        pointer-events: none;
      }
    }
  </style>
  <script>
    import { gsap } from "gsap";

    window.addEventListener("DOMContentLoaded", () => {
      const squareContainer = document.getElementById(
        "square-container"
      ) as HTMLElement;
      const squareSize: number = 100;
      const screenWidth: number = window.innerWidth;
      const screenHeight: number = window.innerHeight;
      const numCols: number = Math.ceil(screenWidth / squareSize);
      const numRows: number = Math.ceil(screenHeight / squareSize);
      const numSquares: number = numCols * numRows;

      if (squareContainer) {
        squareContainer.style.width = `${numCols * squareSize}px`;
        squareContainer.style.height = `${numRows * squareSize}px`;

        const squares: HTMLElement[] = [];

        for (let i = 0; i < numSquares; i++) {
          const square = document.createElement("div");
          square.classList.add("square");
          squareContainer.appendChild(square);
          squares.push(square);
        }

        gsap.set(squares, { opacity: 1 });

        gsap.to(squares, {
          opacity: 0,
          delay: 1,
          duration: 0.0005,
          stagger: {
            each: 0.004,
            from: "random",
          },
          onComplete: () => {
            setTimeout(() => {
              squareContainer.style.display = "none";
              revealLandingPage();
            }, 0);
          },
        });
      }

      function splitTextIntoSpans(selector: string) {
        let elements = document.querySelectorAll(selector);
        elements.forEach((element) => {
          let text = element.textContent || "";
          let splitText = text
            .split("")
            .map(
              (char) =>
                `<span style="display: inline-block; transform: translateY(100%);">${char === " " ? "&nbsp;" : char}</span>`
            )
            .join("");
          element.innerHTML = splitText;
        });
      }

      splitTextIntoSpans("h1");

      const revealLandingPage = () => {
        const tl = gsap.timeline();

        tl.to(".container", {
          clipPath: "polygon(0% 100%, 100% 100%, 100% 0%, 0% 0%)",
        });

        tl.to(
          "h1 span",
          {
            y: 0,
            stagger: 0.4,
            duration: 1,
            ease: "power4.inOut",
          },
          "-=0.5"
        );

        tl.fromTo(
          "p",
          { y: 50, opacity: 0 },
          {
            y: 0,
            opacity: 1,
            duration: 1,
            ease: "power3.out",
          }
        );

        tl.to(
          ".btn",
          {
            y: 0,
            opacity: 1,
            duration: 1,
            ease: "power3.out",
          },
          "<"
        );
      };
    });
  </script>
</PageNotFoundLayout>
